/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Recommendation as PrismaRecommendation,
  Post as PrismaPost,
} from "@prisma/client";

export class RecommendationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RecommendationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.recommendation.count(args);
  }

  async recommendations(
    args: Prisma.RecommendationFindManyArgs
  ): Promise<PrismaRecommendation[]> {
    return this.prisma.recommendation.findMany(args);
  }
  async recommendation(
    args: Prisma.RecommendationFindUniqueArgs
  ): Promise<PrismaRecommendation | null> {
    return this.prisma.recommendation.findUnique(args);
  }
  async createRecommendation(
    args: Prisma.RecommendationCreateArgs
  ): Promise<PrismaRecommendation> {
    return this.prisma.recommendation.create(args);
  }
  async updateRecommendation(
    args: Prisma.RecommendationUpdateArgs
  ): Promise<PrismaRecommendation> {
    return this.prisma.recommendation.update(args);
  }
  async deleteRecommendation(
    args: Prisma.RecommendationDeleteArgs
  ): Promise<PrismaRecommendation> {
    return this.prisma.recommendation.delete(args);
  }

  async getPost(parentId: string): Promise<PrismaPost | null> {
    return this.prisma.recommendation
      .findUnique({
        where: { id: parentId },
      })
      .post();
  }
}
